{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "da5eb63e-3a09-4e4c-a632-488dd4f6b59c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model loaded successfully.\n",
      "Label encoders loaded successfully.\n",
      "Input DataFrame for Prediction:\n",
      "   Venue  Bat First  Bat Second\n",
      "0     30          2           6\n",
      "Model Prediction: [14]\n",
      "Input DataFrame for Prediction:\n",
      "   Venue  Bat First  Bat Second\n",
      "0     30          2          93\n",
      "Model Prediction: [2]\n",
      "Input DataFrame for Prediction:\n",
      "   Venue  Bat First  Bat Second\n",
      "0     30          6          93\n",
      "Model Prediction: [6]\n",
      "Input DataFrame for Prediction:\n",
      "   Venue  Bat First  Bat Second\n",
      "0     30          6          82\n",
      "Model Prediction: [75]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import pickle\n",
    "import streamlit as st\n",
    "\n",
    "# Define the teams and venues\n",
    "teams = [\"India\", \"Pakistan\", \"Afghanistan\", \"Bangladesh\", \"Australia\", \"Ireland\",\n",
    "         \"New Zealand\", \"South Africa\", \"Sri Lanka\", \"West Indies\", \"Zimbabwe\",\n",
    "         \"Uganda\", \"Iceland\"]\n",
    "\n",
    "venues = ['The Rose Bowl', 'Eden Park', 'New Wanderers Stadium', 'County Ground',\n",
    "          'Gahanga International Cricket Stadium', 'GB Oval', 'Sportpark Het Schootsveld',\n",
    "          'Malahide', 'Amini Park', 'Gymkhana Club Ground', 'Sylhet International Cricket Stadium',\n",
    "          'Providence Stadium', 'Scott Page Field', 'JSCA International Stadium Complex',\n",
    "          'Queens Sports Club']\n",
    "\n",
    "# Load the trained model and label encoders\n",
    "try:\n",
    "    with open('model.pkl', 'rb') as f:\n",
    "        model = pickle.load(f)\n",
    "    print(\"Model loaded successfully.\")\n",
    "except FileNotFoundError:\n",
    "    st.error(\"Error: The file 'model.pkl' was not found.\")\n",
    "    st.stop()\n",
    "except Exception as e:\n",
    "    st.error(f\"Error: Failed to load the model. {e}\")\n",
    "    st.stop()\n",
    "\n",
    "# Load label encoders\n",
    "try:\n",
    "    with open('label_encoder_venue.pkl', 'rb') as f:\n",
    "        label_encoder_venue = pickle.load(f)\n",
    "    with open('label_encoder_bat_first.pkl', 'rb') as f:\n",
    "        label_encoder_bat_first = pickle.load(f)\n",
    "    with open('label_encoder_bat_second.pkl', 'rb') as f:\n",
    "        label_encoder_bat_second = pickle.load(f)\n",
    "    with open('label_encoder_winner.pkl', 'rb') as f:\n",
    "        label_encoder_winner = pickle.load(f)\n",
    "    print(\"Label encoders loaded successfully.\")\n",
    "except FileNotFoundError:\n",
    "    st.error(\"Error: One or more label encoder files were not found.\")\n",
    "    st.stop()\n",
    "except Exception as e:\n",
    "    st.error(f\"Error: Failed to load label encoders. {e}\")\n",
    "    st.stop()\n",
    "\n",
    "# Function to make a prediction\n",
    "def predict_winner(venue, bat_first, bat_second):\n",
    "    # Encode input data\n",
    "    try:\n",
    "        venue_encoded = label_encoder_venue.transform([venue])\n",
    "        bat_first_encoded = label_encoder_bat_first.transform([bat_first])\n",
    "        bat_second_encoded = label_encoder_bat_second.transform([bat_second])\n",
    "    except ValueError as e:\n",
    "        return f\"Error: One or more input values are not recognized. {e}\"\n",
    "\n",
    "    # Prepare input DataFrame\n",
    "    input_data = {\n",
    "        'Venue': [venue_encoded[0]],\n",
    "        'Bat First': [bat_first_encoded[0]],\n",
    "        'Bat Second': [bat_second_encoded[0]]\n",
    "    }\n",
    "    input_df = pd.DataFrame(input_data)\n",
    "\n",
    "    # Predict\n",
    "    try:\n",
    "        prediction = model.predict(input_df)\n",
    "        winner = label_encoder_winner.inverse_transform(prediction)\n",
    "        return winner[0]\n",
    "    except Exception as e:\n",
    "        return f\"Error: Prediction failed. {e}\"\n",
    "\n",
    "# Streamlit application\n",
    "st.title(\"Cricket Match Prediction\")\n",
    "\n",
    "# Create and place widgets\n",
    "venue = st.selectbox(\"Select Venue:\", venues)\n",
    "bat_first = st.selectbox(\"Select Team Batting First:\", teams)\n",
    "bat_second = st.selectbox(\"Select Team Batting Second:\", teams)\n",
    "\n",
    "if st.button(\"Predict Winner\"):\n",
    "    winner = predict_winner(venue, bat_first, bat_second)\n",
    "    st.write(f\"**Predicted Winner:** {winner}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c78beafe-74f0-43f4-87d5-0efa39ad2da4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
